package ContextForest;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.LinkedList;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SwingWorker;

import definicions.Cluster;

import moduls.frm.FrmPrincipalDesk;
import moduls.frm.QueryData;

public class ChooseCompareTree extends JDialog implements ActionListener, PropertyChangeListener{
	
	//FIELDS
	
	//master
	private FrmPrincipalDesk f;
	
	//GUI
	private JPanel jp, jp2, jpEnclosing;
	private JLabel LblTree, LblParameters, LblRun;
	private String strLblTree = " REFERENCE TREE";
	private String strLblParameters = " SCANNING PARAMETERS";
	private String strLblRun = " EXECUTE SCAN";
	private JRadioButton rbLoadedTree, rbQueryTree;
	private String strLoadedTree = "Loaded Phylogenetic Tree:";
	private String strQueryTree = "Context Tree, generated by Query:";
	private ButtonGroup bg;
	private JComboBox<String> PhyloMenu, QSMenu, ComparisonMenu;
	private String[] LoadedPhyloItems, QuerySetMenuItems, ComparisonApproaches;
	private JTextField txtQueryField, LblQuerySet, LblComparisonApproach;
	private String strQuerySet = "Query Set:";
	private String strComparisonApproach = "Comparison Approach:";
	private JButton btnExecuteScan;
	private String strScan = "Excecute Scan";
	private JProgressBar progressbar;
	
	//Insets
	private Insets lblIns = new Insets(3,3,3,3);
	private Insets downIns = new Insets(5,5,20,1);
	private Insets basIns = new Insets(1,1,1,1);
	
	//CONSTRUCTOR
	public ChooseCompareTree(FrmPrincipalDesk f){
		
		//Initializations
		this.f = f;
		BuildMenus();
		
		//create components
		this.getPanel();
		this.getFrame();
		
		
		//Last step: make window visible
		this.setVisible(true);
	}
	
	// ======= Classes ===========//
	public class TreeCompareWorker extends SwingWorker<Void, Void>{

		//constructor
		public TreeCompareWorker(){
			
		}
		
		//Central processing
		@Override
		protected Void doInBackground() throws Exception {
			
			//switch cursor
			Component glassPane = getRootPane().getGlassPane();
			glassPane.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			glassPane.setVisible(true);
			
			//Initialize output
			LinkedList<TreeCompareReport> Reports = new LinkedList<TreeCompareReport>();
			
			//Retrieve appropriate Query Set
			QuerySet TQ = null;
			for (QuerySet QS : f.getOS().getQuerySets()){
				if (QS.getName().equals((String) QSMenu.getSelectedItem())){
					TQ = QS;
					break;
				}
			}
			
			//Retrieve tree and cluster
			String TreeName = "";
			Cluster cm = null;
			
			if (rbLoadedTree.isSelected()){
				
				//retrieve name
				TreeName = (String) PhyloMenu.getSelectedItem();
				
				//Retrieve tree
				//TODO: work out names / tree / clusters various data structures
				
			} else {
				
				//invent name
				TreeName = "Query: " + txtQueryField.getText();
				
				//Assemble appropriate query data set
				QueryData Q = new QueryData();
				
//				//TODO: Add Parameters
//				Q.setAnnotationSearch(AnnotationSearch);
//				Q.setQueries(Queries);
//				Q.setClusters(Clusters);
//				Q.setName(Name);
//				Q.setContextSetName(ContextSetName);
//				Q.setDissimilarityType(DissimilarityType);
//				Q.setClusteringType(ClusteringType);
//				Q.setAnalysesList(P);
//				Q.setCSD(CSD);
//				Q.setOSName(OSName);
				
				//convert to cluster
				cm = GenerateClusterFromQuery(Q);
				
			}

			//Initialize counter, prepare progress bar
			int Counter = 0;
			
			//Scan each individual query 
			for (QueryData QD : TQ.getContextTrees()){
				
				//Initialize output
				TreeCompareReport TCR = null;
				
				//generate cluster from every test query
				Cluster cq = GenerateClusterFromQuery(QD);
				
				//Generate report for every cluster
				String Method = (String) ComparisonMenu.getSelectedItem();
				if (Method.equals("Fowlkes-Mallows")){
					TCR = FowlkesMallows(cm, cq);
				} else if (Method.equals("Robinson-Foulds")) {
					TCR = RobinsonFoulds(cm, cq);
				}
				
				//Add to list
				Reports.add(TCR);
				
				//Increment counter + update progress bar
				Counter++;
				int progress = (int) (100.0 *((double) Counter )/((double) TQ.getContextTrees().size())); 
				setProgress(progress);

			}
			
			//Finally, store this set of reports appropriately
			TQ.getTreeComparisons().put(TreeName, Reports);
			
			//switch cursor
			glassPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			glassPane.setVisible(false);
			
			return null;
		}
		
		// ======= Supplemental Methods ====== //
		
		//TODO Generate cluster from query
		protected Cluster GenerateClusterFromQuery(QueryData QD){
			
			//Initialize output
			Cluster c = null;
			
			return c;
		}
		
		//TODO Tree comparison method: Fowlkes Mallows
		protected TreeCompareReport FowlkesMallows(Cluster Master, Cluster Query){
			
			//Initialize output
			TreeCompareReport TCR = new TreeCompareReport();
			
			int Counter = 0;
			while (Counter< 10000){
				System.out.println(Counter);
				Counter++;
			}
			
			//return
			return TCR;
		}
		
		//TODO Tree comparison method: Robinson Foulds
		protected TreeCompareReport RobinsonFoulds(Cluster Master, Cluster Query){
			
			//Initialize output
			TreeCompareReport TCR = new TreeCompareReport();
			
			//return
			return TCR;
		}
		
		//post processing
		public void done(){
			
			//switch cursor to normal
			Component glassPane = getRootPane().getGlassPane();
			glassPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			glassPane.setVisible(false);
			
			//re-set progress bar
			progressbar.setValue(0);
			
			//launch new window
			//TODO
			
			//close window
			dispose();
		}
		
	}
	
	// ======= GUI Methods ====== //
	
	//panel
	public void getPanel(){
		
		//initial GridBagLayout parameters
		jp = new JPanel();
		jp.setLayout(new GridBagLayout());
		final GridBagConstraints c = new GridBagConstraints();
		int gridy = 0;
		c.weightx = 1;
		c.insets = new Insets(2,2,2,2);
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		
		/*
		 * COMPARISON TREE
		 */
		
		//Label
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = lblIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 3;
		LblTree = new JLabel(strLblTree);
		LblTree.setBackground(Color.GRAY);
		LblTree.setOpaque(true);
		jp.add(LblTree,c);
		gridy++;
		
		//create button group
		bg = new ButtonGroup();
		rbLoadedTree = new JRadioButton(strLoadedTree);
		rbQueryTree = new JRadioButton(strQueryTree);
		bg.add(rbLoadedTree);
		bg.add(rbQueryTree);
		
		//Loaded Tree RB
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = basIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 2;
		jp.add(rbLoadedTree, c);
		
		//Select from drop-down menu
		c.gridx = 2;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = basIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 1;
		PhyloMenu = new JComboBox<String>(LoadedPhyloItems);
		if (f.getOS().getParsedPhyTrees().size() > 0){
			PhyloMenu.setEnabled(true);
			rbLoadedTree.setSelected(true);
		} else {
			PhyloMenu.setEnabled(false);
			rbLoadedTree.setEnabled(false);
			rbQueryTree.setSelected(true);
		}

		jp.add(PhyloMenu, c);
		gridy++;
		
		//Generated Tree RB
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = basIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 2;
		jp.add(rbQueryTree, c);
		
		//Enter Query box
		c.ipady = 7;
		c.gridx = 2;
		c.gridy = gridy;
		c.gridwidth = 1;
		c.gridheight = 1;
		c.insets = basIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		txtQueryField = new JTextField("");
		txtQueryField.setEditable(true);
		txtQueryField.addActionListener(this);
		jp.add(txtQueryField, c);
		c.ipady = 0;
		gridy++;
		
		/*
		 * SCANNING PARAMETERS
		 */
		
		//Label
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = lblIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 3;
		LblParameters = new JLabel(strLblParameters);
		LblParameters.setBackground(Color.GRAY);
		LblParameters.setOpaque(true);
		jp.add(LblParameters,c);
		gridy++;
		
		//Select Query Set
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.fill = GridBagConstraints.NONE;
		c.gridwidth = 1;
		LblQuerySet = new JTextField(strQuerySet);
		LblQuerySet.setHorizontalAlignment(JTextField.LEFT);
		LblQuerySet.setEditable(false);
		jp.add(LblQuerySet, c);
		
		//Query Set Drop-down menu
		c.gridx = 2;
		c.gridy = gridy;
		c.gridheight = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 1;
		QSMenu = new JComboBox<String>(QuerySetMenuItems);
		jp.add(QSMenu, c);
		gridy++;
		
		//Select comparison approach
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.fill = GridBagConstraints.NONE;
		c.gridwidth = 1;
		LblComparisonApproach = new JTextField(strComparisonApproach);
		LblComparisonApproach.setHorizontalAlignment(JTextField.LEFT);
		LblComparisonApproach.setEditable(false);
		jp.add(LblComparisonApproach, c);
		
		//Comparison Approach drop-down menu
		c.gridx = 2;
		c.gridy = gridy;
		c.gridheight = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 1;
		ComparisonMenu = new JComboBox<String>(ComparisonApproaches);
		jp.add(ComparisonMenu, c);
		gridy++;
		
		/*
		 * EXECUTE
		 */
		jp2 = new JPanel();
		jp2.setLayout(new GridBagLayout());
		c.anchor = GridBagConstraints.CENTER;
		
		//Label
		c.gridx = 0;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = lblIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridwidth = 3;
		LblRun = new JLabel(strLblRun);
		LblRun.setBackground(Color.GRAY);
		LblRun.setOpaque(true);
		jp2.add(LblRun,c);
		gridy++;
		
		//button
		c.gridx = 1;
		c.gridy = gridy;
		c.gridheight = 1;
		c.insets = basIns;
		c.fill = GridBagConstraints.NONE;
		c.gridwidth = 1;
		btnExecuteScan = new JButton(strScan);
		btnExecuteScan.addActionListener(this);
		jp2.add(btnExecuteScan, c);
		gridy++;
		
		//progressbar
		c.gridx = 0;
		c.gridy = gridy;
		c.gridwidth = 3;
		c.gridheight = 1;
		c.insets = downIns;
		c.fill = GridBagConstraints.HORIZONTAL;
		progressbar = new JProgressBar();
		progressbar.setValue(0);
		jp2.add(progressbar, c);
		
		//add to frame
		jpEnclosing = new JPanel();
		jpEnclosing.setLayout(new BorderLayout());
		jpEnclosing.add(jp, BorderLayout.NORTH);
		jpEnclosing.add(jp2, BorderLayout.SOUTH);
		this.add(jpEnclosing);;
		
	}
	
	//frame
	public void getFrame(){
		this.setSize(600,300);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setTitle("Select Tree and Query Set");
		this.setResizable(true);
	}
	
	// ======= Listeners + Action Methods ====== //

	//Action headquarters
	@Override
	public void actionPerformed(ActionEvent e) {
		
		//launch listener
		TreeCompareWorker TCW = new TreeCompareWorker();
		TCW.addPropertyChangeListener(this);
		TCW.execute();
		
		//finally, close window
		//this.dispose();
	}

	//Build Menus
	public void BuildMenus(){
		
		//Phylo Trees
		LoadedPhyloItems = f.getPanPhyTreeMenu().getLoadedPhyTrees();
		
		//Query Sets
		QuerySetMenuItems = new String[f.getOS().getQuerySets().size()];
		if (QuerySetMenuItems.length > 0){
			for (int i = 0; i < QuerySetMenuItems.length; i++){
				QuerySetMenuItems[i] = f.getOS().getQuerySets().get(i).getName();
			}
		} else {
			QuerySetMenuItems = new String[1];
			QuerySetMenuItems[0] = "<none>";
		}
		
		//Comparison Approaches
		ComparisonApproaches = new String[2];
		ComparisonApproaches[0] = "Fowlkes-Mallows";
		ComparisonApproaches[1] = "Robinson-Foulds";
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getPropertyName() == "progress") {
			int progress = (Integer) evt.getNewValue();
			progressbar.setValue(progress);
		}
	}
}
